R.version
library(TreeMaxD)
devtools::load_all(".")
?TreeMaxD
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
TreeMaxD <- function(sample_data, significance_level, num_samples = 10000){
set.seed(456)
num_datasets <- length(sample_data)
n <- sapply(sample_data, length)
D_star_max <- numeric(num_samples)
for (i in 1:num_samples) {
bootstrap_samples <- lapply(sample_data, function(x) rnorm(n = length(x), mean = 0, sd = sqrt(var(x))))
D_star_max[i] <- max(sapply(2:num_datasets, function(j) {
(mean(bootstrap_samples[[j]]) - mean(bootstrap_samples[[1]])) /
sqrt((var(bootstrap_samples[[j]]) / length(bootstrap_samples[[j]])) +
(var(bootstrap_samples[[1]]) / length(bootstrap_samples[[1]])))
}))
}
sort_D_star_max <- sort(D_star_max)
quantile_value <- quantile(sort_D_star_max, probs = 1 - significance_level)
D_Max <- max(sapply(2:num_datasets, function(i) {
(mean(sample_data[[i]]) - mean(sample_data[[1]])) /
sqrt(
(var(sample_data[[i]]) / length(sample_data[[i]])) +
(var(sample_data[[1]]) / length(sample_data[[1]]))
)
}))
if (D_Max > quantile_value) {
result <- "Reject null hypothesis"
} else {
result <- "Do not reject rull hypothesis"
}
return(paste("Critical value:", quantile_value, "; D_Max Test statistic:", D_Max, "; Result:", result))
}
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
TreeMaxD <- function(sample_data, significance_level){
set.seed(456)
sample_data <- lapply(sample_data, function(x) x[!is.na(x)])
num_samples = 10000
num_datasets <- length(sample_data)
n <- sapply(sample_data, length)
D_star_max <- numeric(num_samples)
for (i in 1:num_samples) {
bootstrap_samples <- lapply(sample_data, function(x) rnorm(n = length(x), mean = 0, sd = sqrt(var(x))))
D_star_max[i] <- max(sapply(2:num_datasets, function(j) {
(mean(bootstrap_samples[[j]]) - mean(bootstrap_samples[[1]])) /
sqrt((var(bootstrap_samples[[j]]) / length(bootstrap_samples[[j]])) +
(var(bootstrap_samples[[1]]) / length(bootstrap_samples[[1]])))
}))
}
sort_D_star_max <- sort(D_star_max)
quantile_value <- quantile(sort_D_star_max, probs = 1 - significance_level)
D_Max <- max(sapply(2:num_datasets, function(i) {
(mean(sample_data[[i]]) - mean(sample_data[[1]])) /
sqrt(
(var(sample_data[[i]]) / length(sample_data[[i]])) +
(var(sample_data[[1]]) / length(sample_data[[1]]))
)
}))
if (D_Max > quantile_value) {
result <- "Reject null hypothesis"
} else {
result <- "Do not reject null hypothesis"
}
return(paste("Critical value:", quantile_value, "; D_Max Test statistic:", D_Max, "; Result:", result))
}
# Example usage
a <- c(2, 4, 5, 3, 4, 5, 7)
b <- c(5, 6, 4, 3, 3, 2)
c <- c(2, 7, 9, 8, 4, 1)
TreeMaxD(list(a,b,c),0.05)
a <- c(2, 4, 5, 3, 4, 5, 7)
b <- c(5, 6, 4, 3, 3, 2,NA)
c <- c(2, 7, 9, 8, 4, 1)
TreeMaxD(list(a,b,c),0.05)
TreeMaxD <- function(sample_data, significance_level){
set.seed(456)
sample_data <- lapply(sample_data, function(x) x[!is.na(x)])
num_samples = 10000
num_datasets <- length(sample_data)
n <- sapply(sample_data, length)
sample_data <- lapply(sample_data, function(x) x[!is.na(x)])
print(n)
D_star_max <- numeric(num_samples)
for (i in 1:num_samples) {
bootstrap_samples <- lapply(sample_data, function(x) rnorm(n = length(x), mean = 0, sd = sqrt(var(x))))
D_star_max[i] <- max(sapply(2:num_datasets, function(j) {
(mean(bootstrap_samples[[j]]) - mean(bootstrap_samples[[1]])) /
sqrt((var(bootstrap_samples[[j]]) / length(bootstrap_samples[[j]])) +
(var(bootstrap_samples[[1]]) / length(bootstrap_samples[[1]])))
}))
}
sort_D_star_max <- sort(D_star_max)
quantile_value <- quantile(sort_D_star_max, probs = 1 - significance_level)
D_Max <- max(sapply(2:num_datasets, function(i) {
(mean(sample_data[[i]]) - mean(sample_data[[1]])) /
sqrt(
(var(sample_data[[i]]) / length(sample_data[[i]])) +
(var(sample_data[[1]]) / length(sample_data[[1]]))
)
}))
if (D_Max > quantile_value) {
result <- "Reject null hypothesis"
} else {
result <- "Do not reject null hypothesis"
}
return(paste("Critical value:", quantile_value, "; D_Max Test statistic:", D_Max, "; Result:", result))
}
# Example usage
a <- c(2, 4, 5, 3, 4, 5, 7)
b <- c(5, 6, 4, 3, 3, 2)
c <- c(2, 7, 9, 8, 4, 1)
TreeMaxD(list(a,b,c),0.05)
a <- c(2, 4, 5, 3, 4, 5, 7)
b <- c(5, 6, 4, 3, 3, 2,NA)
c <- c(2, 7, 9, 8, 4, 1)
TreeMaxD(list(a,b,c),0.05)
TreeMaxD <- function(sample_data, significance_level){
set.seed(456)
sample_data <- lapply(sample_data, function(x) x[!is.na(x)])
num_samples = 10000
num_datasets <- length(sample_data)
n <- sapply(sample_data, length)
sample_data <- lapply(sample_data, function(x) x[!is.na(x)])
print(n)
D_star_max <- numeric(num_samples)
for (i in 1:num_samples) {
bootstrap_samples <- lapply(sample_data, function(x) rnorm(n = length(x), mean = 0, sd = sqrt(var(x))))
D_star_max[i] <- max(sapply(2:num_datasets, function(j) {
(mean(bootstrap_samples[[j]]) - mean(bootstrap_samples[[1]])) /
sqrt((var(bootstrap_samples[[j]]) / length(bootstrap_samples[[j]])) +
(var(bootstrap_samples[[1]]) / length(bootstrap_samples[[1]])))
}))
}
sort_D_star_max <- sort(D_star_max)
quantile_value <- quantile(sort_D_star_max, probs = 1 - significance_level)
D_Max <- max(sapply(2:num_datasets, function(i) {
(mean(sample_data[[i]]) - mean(sample_data[[1]])) /
sqrt(
(var(sample_data[[i]]) / length(sample_data[[i]])) +
(var(sample_data[[1]]) / length(sample_data[[1]]))
)
}))
if (D_Max > quantile_value) {
result <- "Reject null hypothesis"
} else {
result <- "Do not reject null hypothesis"
}
return(paste("Critical value:", quantile_value, "; D_Max Test statistic:", D_Max, "; Result:", result))
}
# Example usage
a <- c(2, 4, 5, 3, 4)
b <- c(5, 6, 4, 3, 3, 2)
c <- c(2, 7, 9, 8, 4, 1)
TreeMaxD(list(a,b,c),0.05)
a <- c(2, 4, 5, 3, 4, 5, 7, NA, NA)
b <- c(5, 6, 4, 3,NA)
c <- c(2, 7, 9, 8, 4, 1)
TreeMaxD(list(a,b,c),0.05)
library(TreeMaxD)
?TreeMaxD
?TreeMaxD
library(TreeMaxD)
?TreeMaxD
?TreeMaxD
?TreeMaxD
#' Max-D test is for testing equality means against tree-ordered alternatives in one-way ANOVA
#' @export
#' @param sample_data list
#' @param significance_level numeric
#' @import stats
TreeMaxD <- function(sample_data, significance_level){
set.seed(456)
sample_data <- lapply(sample_data, function(x) x[!is.na(x)])
num_samples = 10000
num_datasets <- length(sample_data)
n <- sapply(sample_data, length)
D_star_max <- numeric(num_samples)
for (i in 1:num_samples) {
bootstrap_samples <- lapply(sample_data, function(x) rnorm(n = length(x), mean = 0, sd = sqrt(var(x))))
D_star_max[i] <- max(sapply(2:num_datasets, function(j) {
(mean(bootstrap_samples[[j]]) - mean(bootstrap_samples[[1]])) /
sqrt((var(bootstrap_samples[[j]]) / length(bootstrap_samples[[j]])) +
(var(bootstrap_samples[[1]]) / length(bootstrap_samples[[1]])))
}))
}
sort_D_star_max <- sort(D_star_max)
quantile_value <- quantile(sort_D_star_max, probs = 1 - significance_level)
D_Max <- max(sapply(2:num_datasets, function(i) {
(mean(sample_data[[i]]) - mean(sample_data[[1]])) /
sqrt(
(var(sample_data[[i]]) / length(sample_data[[i]])) +
(var(sample_data[[1]]) / length(sample_data[[1]]))
)
}))
if (D_Max > quantile_value) {
result <- "Reject null hypothesis"
} else {
result <- "Do not reject null hypothesis"
}
return(paste("Critical value:", quantile_value, "; D_Max Test statistic:", D_Max, "; Result:", result))
}
?TreeMaxD
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
library(TreeMaxD)
